// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birth         DateTime @db.Date
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  phone_num   String   @map("phone_num") @db.VarChar(15)

  memberFavorCategories MemberPrefer[]
  memberMissions       MemberMission[]
  memberAgrees         MemberAgree[]
  reviews              Review[]
  

  @@map("member")
} 


model Store {
 id             Int         @id @default(autoincrement())
 regionId       Int
 name           String    @db.VarChar(250)
 address        String    @db.VarChar(250)
 score          Float
 createdAt       DateTime  @default(now())
 updatedAt       DateTime  @updatedAt@db.DateTime(6)
 
 region  Region @relation(fields:[regionId],references:[id])
 reviews Review[]
 missions Mission[]
 reviewImages    ReviewImage[]

  @@map("store")
}

model Region {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(250)
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)
 
  store       Store[]

  @@map("region")

}
model Term {
  id             Int         @id @default(autoincrement())
  title          String      @db.VarChar(250)
  body           String      @db.LongText
  optional       Boolean?
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)
  
  memberAgrees MemberAgree[]

  @@map("term")
}

model FoodCategory {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(250)
  column         String?     @db.VarChar(250)

   memberPrefers  MemberPrefer[]

  @@map("food_category")
}

model MemberPrefer {
  id             Int         @id @default(autoincrement())
  memberId       Int
  categoryId     Int
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)

  member       Member       @relation(fields: [memberId], references: [id])
  foodCategory FoodCategory @relation(fields: [categoryId], references: [id])

  @@map("memberprefer")

}

model Mission {
  id             Int         @id @default(autoincrement())
  storeId        Int
  reward         Int
  deadline      DateTime     
  missionSpec   String       @db.LongText
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)

  store        Store        @relation(fields: [storeId], references: [id])
  memberMissions MemberMission[]

  @@map("mission")
}

model MemberMission {
  id             Int         @id @default(autoincrement())
  memberId       Int
  missionId      Int
  status         String     @db.VarChar(250)
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)

  member  Member  @relation(fields: [memberId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])

  @@map("membermission")

}

model Review {
  id             Int         @id @default(autoincrement())
  memberId       Int
  storeId        Int
  body           String     @db.LongText
  score          Float
  createdAt      DateTime   @db.DateTime(6)

  member  Member @relation(fields: [memberId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])
  reviewImages ReviewImage[]


  @@map("review")
}

model ReviewImage {
  id             Int         @id @default(autoincrement())
  reviewId       Int
  storeId        Int
  imageUrl       String     @db.LongText
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)

  review         Review      @relation(fields: [reviewId], references: [id])
  store          Store       @relation(fields: [storeId], references: [id])


  @@map("reviewimage")
}

model MemberAgree {
  id             Int         @id @default(autoincrement())
  memberId       Int
  termsId        Int
  createdAt       DateTime  @db.DateTime(6)
  updatedAt       DateTime  @updatedAt @db.DateTime(6)

  member Member @relation(fields: [memberId], references: [id])
  terms  Term   @relation(fields: [termsId], references: [id])


    @@map("memberagree")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}